Para estos comandos tendremos que posicionarnos en el directorio en donde se encuentra SQLite
para dirigirse a una carpeta se utiliza cd, ej. cd C:\Users\CARLOS\Desktop\Programas\SQLite
Lo que esta entre () se sustituye por los datos que tocan
Lo que esta entre [] es lo importante 
Documentacion de SQLite:
	https://www.sqlitetutorial.net/sqlite-aggregate-functions/

Desconexion a base de datos: 
	.quit																												[.quit]

--------------------------------BASE DE DATOS---------------------------------------------------

crear base de datos o conectar a base de datos: 
	sqlite3 (nombre de la base).db 																						[sqlite3]
ejecutar instrucciones por lotes desde un archivo externo
	.read "(ruta del archivo)"																							[.read "(ruta archivo)"]

-----------------------------------TABLAS--------------------------------------------------------

crear nueva tabla: 
	CREATE TABLE (nombre tabla) ((atributo) (tipo de dato), (atributo2) (tipo de dato), ...);							[CREATE TABLE]
crear tabla temporal: 
	CREATE TEMP/TEMPORARY TABLE (nombre base de datos).(nombre tabla) ((atributo) (tipo de dato), (atributo2) (tipo de dato), ...);	[TEMP]
Crear tabla siempre y cuando la tabla no exista:
	CREATE TABLE IF NOT EXIST (nombre tabla) ....;																		[IF NOT EXIST]
Ver eschema de la tabla: 
	.schema (nombre de al atabla);																						[.schema]
Ver tablas de la base de datos:
	.tables																												[.tables]

------------MODIFICAR TABLA--------------------------

Agregar una nueva columna
	ALTER TABLE (nombre Tabla) ADD (nombreColumna nueva) (tipo de dato);												[ALTER TABLE, ADD]
Agregar columna en lugar especifico
	ALTER TABLE (nombre Tabla) ADD (nombreColumna nueva) (tipo de dato) AFTER (columna);								[ALTER TABLE, AFTER]
Cambiar nombre de tabla:
	ALTER TABLE (nombre TAbla) RENAME TO  (nuevo nombre);																[RENAME TO]
Eliminar alguna columna
	ALTER TABLE (nombre Tabla) DROP COLUMN (columna1), (columna 2), ...;												[DROP COLUMN]
Renombrar columna:
	ALTER TABLE (nombre Tabla) RENAME COLUMN (columna) TO (nuevo nombre Columna);										[RENAME COLUMN, TO]
Modificar tipo de dato de columna:
	ALTER TABLE (nombre Tabla) MODIFY COLUMN (columna) (nuevo tipo de dato);											[MODIFY COLUMN]

---------------------------------- ATRIBUTOS DE COLUMNAS ----------------------------------------
al crear o modificar un campo se le puede colocar atributos:
	CREATE TABLE (nombre tabla) ((nombreColumna1) (tipo de dato) (atributo1) (atributo 2), (nombreColumna1) (tipo de dato), ...);	[(atributo)]
Campo no nulo:
	CREATE TABLE (nombre tabla) ((nombreColumna1) (tipo de dato) NOT NULL);												[NOT NULL]
Campo no auto incremental:
	CREATE TABLE (nombre tabla) ((nombreColumna1) (tipo de dato) NOT NULL AUTOINCREMENT);								[AUTOINCREMENT]
Campo con valor unico:
	CREATE TABLE (nombre tabla) ((nombreColumna1) (tipo de dato) AUTO_INCREMENTAL UNIQUE);								[UNIQUE]
Establecer un valor por defecto a una columna:
	CREATE TABLE (nombre TAbla) ((nombreColumna1) (tipo de dato) DEFAULT((valor)))										[DEFAULT]


-------------------------------- CLAVE PRIMARIA E INDICES --------------------------------------------------

Establecer un campo como clave primaria
	CREATE TABLE (nombre tabla) ((atributo) (tipo de dato) PRIMARY KEY AUTO_INCREMENTAL, (atributo2) (tipo de dato), ...,);	[PRIMARY KEY]
Clave primaria de mas de una columna:
	CREATE TABLE (nombre Tabla) (columnas), PRIMARY KEY (columna1, columna 2, ...);										[PRIMARY KEY (columna1, columna2,...)]
Crear un indice:
	CREATE INDEX (nombre Indice) ON (nombre Tabla) ((columnas));														[CREATE INDEX]

------------------------------- CLAVE FORANEA ----------------------------------------------------

Establecer un campo como clave foranea
	CREATE TABLE (nombre tabla) ((columna) (tipo de dato), FOREIGN KEY ((columna)) REFERENCES (tabla)((columna)) );		[FOREIGN KEY, REFERENCES]
Agregar clave foranea a tabla ya existente:
	ALTER TABLE (nombre Tabla) ADD (columna) (definicion), ADD CONSTRAINT fk_(nombrecoluma) FOREIGN KEY (columna) REFERENCES (tabla)(columna);
																														[ALTER TABLE, FOREIGN KEY]

-------------------------------SELECCION EN UNA TALBA---------------------------------------------

seleccionar todos los datos de la tabla: 
	SELECT * FROM (nombre tabla);																						[*]
seleccin por columnas: 
	SELECT (nombreColumna1), (nombreColumna2),.. FROM (nombreTabla);													[nombreColumna]
Colocar alias a columna seleccionada:
	SELECT (nombreColumna1) AS (nombreAlias), (nombreColumna2) AS (nombreAlias),... FROM (nombreTabla);					[AS]
Seleccionar de manera ordenada: 
	SELECT (nombreColumna1), (nombreColumna2),.. FROM (nombreTabla) ORDER BY (condicino1), (condicion2),...;			[ORDER BY]
Ordenar de forma descendente: 
	SELECT (nombreColumna1), (nombreColumna2),.. FROM (nombreTabla) ORDER BY (condicino1), (condicion2),... DESC;		[DESC]
Ordenar de forma Ascendente: 
	SELECT (nombreColumna1), (nombreColumna2),.. FROM (nombreTabla) ORDER BY (condicino1) DESC, (condicion2) ASC,... ;	[ASC]
Seleccinar sin repetidos: 
	SELECT DISTINCT  (nombreColumna1), (nombreColumna2),.. FROM (nombreTabla) ORDER BY (condicino1), (condicion2),...;	[DISTINCT]
seleccion utilizando innerJoin
	SELECT (columnas) FROM (Tabla desde la que partimos) INNER JOIN (Tabla con la que se unira) ON (condicion);			[INNER JOIN, ON]
seleccion utilizando LeftJoin
	SELECT (columnas) FROM (Tabla desde la que partimos) LEFT JOIN (Tabla con la que se unira) ON (condicion);			[LEFT JOIN, ON]
seleccion utilizando RightJoin
	SELECT (columnas) FROM (Tabla desde la que partimos) RIGHT JOIN (Tabla con la que se unira) ON (condicion);			[RIGHT JOIN, ON]


--------------------------------CONDICINOES----------------------------------------------------------
Seleccionar por condicion: 
	SELECT * FROM (nombreTabla) WHERE (nombreColumna) = '(valor)';														[WHERE]
Seleccionar cumpliendo dos o mas condiciones operado and: 
	SELECT * FROM (nombreTabla) WHERE (nombreColumna) = '(valor)' AND (nombreColumna) = '(valor)';						[AND]
Seleccionar cumpliendo alguna condicion operador or: 
	SELECT * FROM (nombreTabla) WHERE (nombreColumna) = '(valor)' OR (nombreColumna) = '(valor)';						[AND]
Utilizar parentesis para agrupar condiciones:
	SELECT * FROM (nombreTabla) WHERE ((nombreColumna) = '(valor)' AND (nombreColumna)= '(valor)') OR (nombreColumna) = '(valor)';			[()]
Seleccinar cumpliendo un rango de valores con operadores <,>, <=, >=:
	SELECT * FROM (nombreTabla) WHERE (nombreColumna) >= '(valor)';														[<,>, <=, >=]
Seleccinar en base a un valor que pueda ser parecido
	SELECT * FROM (nombreTabla) WHERE (nombreColumna) LIKE '(valor)%';													[LIKE, %]
Establecer un limite de registros a recuperar:
	SELECT * FROM (nombreTabla) LIMIT (valor);																			[LIMIT]


--------------------------- SELECCION EN MAS DE UNA TABLA ----------------------------------------

Seleccionar varios campos de varias tablas:
SELECT (tabla1).(columna), (tabla2).(columna),... FROM (tabla1), (tabla2),...;											[(tabla).(columna)]


------ESTRUCUTRAR VISTA DE TABLAS EN CONSOLA------
.headre on 																												[.header on]
.mode column 																											[.mode column]
SELECT * FROM (nombre tabla);

--------------------------------INSERTAR REGISTRO EN TABLA--------------------------------------

Insertar algun registro en tabla: 
	INSERT INTO (nombre tabla) VALUES ('(valor columna 1)', '(valor columna 2)',...)									[INSERT, INTO, VALUES]
Insertar mas de un registro en tabla: 
	INSERT INTO (nombre tabla) VALUES ('(valor columna 1)', '(valor columna 2)',...), ('(valor columna 1)', '(valor columna 2)',...), ...;
Insertar registro con valores en especifico
	INSERT INTO (nombre tabla) ('(columna1)', '(columna2)',...) VALUES ('(valor 1)', '(valor2)',....);					[VALORES ESPECIFICOS]
Cargar registros desde un archivo, en diferentes lines: 										
						.mode (tipo de archiv ej. csv) 																	[.mode]
						.import "(ruta del archivo con \\ mejor)" (nombre de la tabla)									[.import]
Copiar datos de una tabla e insertarlos en otra:
	INSERT INTO (nombre Tabla) (columnas) SELECT (consulta);															[INSERT INTO, SELECT]


-------------------------------------FUNCIONES AGREGADAS (principales)-------------------------------------------

Funcion count(): Nos permite contar registros
	SELECT COUNT((columnas)) FROM (nombre tabla);																		[COUNT()]
Funcion count() con DISTINCT: Nos devuelve el numero de registros sin repetir valores
	SELECT COUNT(DISTINCT (nombreColumna)) FROM (nombre Tabla);															[COUNT(DISTINCT)]
FUNCION count() con condicion:
	SELECT COUNT((columnas)) FROM (SELECT (columnas) FROM (nombreTabla) WHERE (condicion)) AS (nombreAlias);			[(Seleccion), AS]
Funcion grou by: Nos permite agrupar una busqueda de acuerdo a una Columna:
	SELECT (columnas) FROM (nombre Tabla) GROUP BY (columna);															[GROUP BY]
FUNCION max(): Nos retorna el valor maximo que hay en una columna
	SELECT MAX((columna)) FROM (nombre Tabla);																			[MAX()]
FUNCION min(): Nos retorna el valor minimo que hay en una columna
	SELECT MIN((columna)) FROM (nombre Tabla);																			[MIN()]
FUNCION sum(): Nos devuelve la suma de todos los valores de la columna que indiquemos
	SELECT SUM((columna)) FROM (nombre Tabla);																			[SUM()]
FUNCION sum() con DISTINCT: Nos devuelve la suma de todos los valores sin repetir
	SELECT SUM(DISTINCT (columna)) FROM (nombre Tabla);																	[SUM(DISTINCT)]
FUNCION avg(): Nos devuelve el promedio de los valores de la columna que indiquemos
	SELECT AVG((columna)) FROM (nombre Tabla);																			[AVG()]
FUNCION date('now'): Nos devuelve la fecha actual
	INSERT INTO (nombre Tabla) VALUES (DATE('now'));																	[DATE('now')]
FUNCION LAST_INSERT_ROWID(): Devuelve el ultimo id que se genero o se inserto
	INSERT INTO (nombre tabla) VALUES (LAST_INSERT_ROWID());															[LAST_INSERT_ROWID()]



----------------------------------- MODIFICAR REGISTROS --------------------------------------------------------------

Modificar todos los registros de una columna
	UPDATE (nombre Tabla) SET (columna) = (valor);																		[UPDATE, SET]
Modificar con una condiciones
	UPDATE (nombre Tabla) SET (Columna) = (valor) WHERE (columna) = '(valor)' AND (columna) = '(valor)';				[UPDATE WHERE, AND OR <, etc]


--------------------------------- ELIMINAR INFORMACION ------------------------------------------------------------------
Eliminar todos los registros de la tabla
	DELETE FROM (nombre Tabla);																							[DELETE]
Eliminar una tabla
	DROP TABLE (nombre Tabla)																							[DROP TABLE]
Eliminar registros de una tabla
	DELETE FROM (nombre Tabla) WHERE (columna) = '(valor)';																[DELETE, WHERE]


------------------------------- MODIFICAR ESTRUCUTURA DE TABLA  -------------------------------------------------------
Agregar una nueva columna
	ALTER TABLE (nombre Tabla) ADD (nombreColumna nueva) (tipo de dato);												[ALTER TABLE, ADD]
Agregar columna en lugar especifico
	ALTER TABLE (nombre Tabla) ADD (nombreColumna nueva) (tipo de dato) AFTER (columna);								[AFTER]
Cambiar nombre de tabla:
	ALTER TABLE (nombre TAbla) RENAME TO  (nuevo nombre);																[RENAME TO]
Eliminar alguna columna
	ALTER TABLE (nombre Tabla) DROP COLUMN (columna1), (columna 2), ...;												[DROP COLUMN]
Renombrar columna:
	ALTER TABLE (nombre Tabla) RENAME COLUMN (columna) TO (nuevo nombre Columna);										[RENAME COLUMN, TO]
Modificar tipo de dato de columna:
	ALTER TABLE (nombre Tabla) MODIFY COLUMN (columna) (nuevo tipo de dato);											[MODIFY COLUMN]


---------------------------- EXPORTAR BASES DE DATOS Y TABLAS (consola) ---------------------------------------------------------

Volcado de datos en consola mostrnando las sentencias sql
	.dump 																												[.dump]
Volcado de datos en una archivo
	.output "(ruta con nombre de archivo a crear)"																		[.output]
	.dump 																												[.dump] 


---------------------------- TRANSACCIONES ---------------------------------------------------------------------------------------

Iniciar transaccion:
	BEGIN TRANSACTION;																									[BEGIN TRANSACTION]
Hacer rollback de los cambios:
	ROLLBACK;																											[ROLLBACK]
Finalizar transaccion:
	COMMIT;																												[COMMIT]


---------------------------------	VISTAS -------------------------------------------------------------------------------

Crear una vista:
	CREATE VIEW (nombre Vista) AS (consulta)																			[CREATE VIEW, AS]

-----------------------------------	TRIGGERS o EVENTOS ------------------------------------------------------------------

Crear un Trigger o Disparador:
	CREATE TRIGGER (nombre trigger) (AFTER o BEFORE) (INSERT, UPDATE, DELETE) ON (nombre Tabla) FOR EACH ROW 			[CREATE TRIGGER]
Empezar procemiento que se ejecutara al cumplirse el disparador
	BEGIN																												[BEGIN]
Terminar procemiento que se ejecutara al cumplirse el disparador
	END 																												[END]